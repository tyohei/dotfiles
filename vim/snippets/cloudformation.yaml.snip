# vim: noexpandtab
snippet main
options head
	# vim: ft=cloudformation.yaml
	AWSTemplateFormatVersion: "2010-09-09"


	Description:


	Metadata:


	Parameters:
		Prefix:
			Type: String


	Mappings:


	Conditions:


	Resources:


	Outputs:
		Prefix:
			Value: !Ref Prefix

snippet main_sam
options head
	# vim: ft=cloudformation.yaml
	AWSTemplateFormatVersion: "2010-09-09"
	Transform: AWS::Serverless-2016-10-31


	Globals:


	Description:


	Metadata:


	Parameters:
		Prefix:
			Type: String


	Mappings:


	Conditions:


	Resources:


	Outputs:
		Prefix:
			Value: !Ref Prefix


snippet param_vpc
options head
	VpcCidr:
		Type: String
		Default: "10.0.0.0/16"
		AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'
	PublicSubnet1Cidr:
		Type: String
		Default: "10.0.0.0/24"
		AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'
	PublicSubnet2Cidr:
		Type: String
		Default: "10.0.1.0/24"
		AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'
	PublicSubnet3Cidr:
		Type: String
		Default: "10.0.2.0/24"
		AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'
	PrivateSubnet1Cidr:
		Type: String
		Default: "10.0.128.0/24"
		AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'
	PrivateSubnet2Cidr:
		Type: String
		Default: "10.0.129.0/24"
		AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'
	PrivateSubnet3Cidr:
		Type: String
		Default: "10.0.130.0/24"
		AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'

snippet param_amazon_linux_2
options head
	ImageId:
		Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
		Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2

snippet param_windows_server_2019
options head
	ImageId:
		Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
		Default: /aws/service/ami-windows-latest/Windows_Server-2019-English-Full-Base

snippet param_amazon_linux_2_ecs_optmized
options head
	ImageId:
		Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
		Default: /aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id

snippet param_windows_server_2019_ecs_optimized
options head
	ImageId:
		Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
		Default: /aws/service/ami-windows-latest/Windows_Server-2019-English-Full-ECS_Optimized/image_id

snippet param_windows_server_2016_ecs_optimized
options head
	ImageId:
		Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
		Default: /aws/service/ami-windows-latest/Windows_Server-2016-English-Full-ECS_Optimized/image_id

# ======== Resources ========
# ==== Private VPC ====
# - VPC
# - Private Subnet {1,2,3}
# - Private Route Table {1,2,3}
# - Private Subnet Route Table Association {1,2,3}
snippet vpc_priavte
options head
	Vpc:
		Type: AWS::EC2::VPC
		Properties:
			CidrBlock: !Ref VpcCidr
			EnableDnsHostnames: true
			EnableDnsSupport: true
			InstanceTenancy: default
			Tags:
				- Key: Name
					Value: !Sub "${Prefix}-vpc"

	PrivateSubnet1:
		Type: AWS::EC2::Subnet
		Properties:
			VpcId: !Ref Vpc
			CidrBlock: !Ref PrivateSubnet1Cidr
			MapPublicIpOnLaunch: false
			AvailabilityZone: !Select
				- 0
				- Fn::GetAZs: !Ref "AWS::Region"
			Tags:
				- Key: Name
					Value: !Sub "${Prefix}-private-subnet-1"

	PrivateSubnet2:
		Type: AWS::EC2::Subnet
		Properties:
			VpcId: !Ref Vpc
			CidrBlock: !Ref PrivateSubnet2Cidr
			MapPublicIpOnLaunch: false
			AvailabilityZone: !Select
				- 1
				- Fn::GetAZs: !Ref "AWS::Region"
			Tags:
				- Key: Name
					Value: !Sub "${Prefix}-private-subnet-2"

	PrivateSubnet3:
		Type: AWS::EC2::Subnet
		Properties:
			VpcId: !Ref Vpc
			CidrBlock: !Ref PrivateSubnet3Cidr
			MapPublicIpOnLaunch: false
			AvailabilityZone: !Select
				- 2
				- Fn::GetAZs: !Ref "AWS::Region"
			Tags:
				- Key: Name
					Value: !Sub "${Prefix}-private-subnet-3"

	PrivateRouteTable1:
		Type: AWS::EC2::RouteTable
		Properties:
			VpcId: !Ref Vpc
			Tags:
				- Key: Name
					Value: !Sub "${Prefix}-private-route-table-1"

	PrivateRouteTable2:
		Type: AWS::EC2::RouteTable
		Properties:
			VpcId: !Ref Vpc
			Tags:
				- Key: Name
					Value: !Sub "${Prefix}-private-route-table-2"

	PrivateRouteTable3:
		Type: AWS::EC2::RouteTable
		Properties:
			VpcId: !Ref Vpc
			Tags:
				- Key: Name
					Value: !Sub "${Prefix}-private-route-table-3"

	PrivateSubnet1RouteTableAssociation:
		Type: AWS::EC2::SubnetRouteTableAssociation
		Properties:
			SubnetId: !Ref PrivateSubnet1
			RouteTableId: !Ref PrivateRouteTable1

	PrivateSubnet2RouteTableAssociation:
		Type: AWS::EC2::SubnetRouteTableAssociation
		Properties:
			SubnetId: !Ref PrivateSubnet2
			RouteTableId: !Ref PrivateRouteTable2

	PrivateSubnet3RouteTableAssociation:
		Type: AWS::EC2::SubnetRouteTableAssociation
		Properties:
			SubnetId: !Ref PrivateSubnet3
			RouteTableId: !Ref PrivateRouteTable3


# ==== VPC 2AZs ====
# - VPC
# - Internet Gateway
# - VPC Gateway Attachment
# - Public Subnet {1,2}
# - NAT Gateway {1,2}
# - Public Route Table
# - Internet Gateway Route
# - Public Subnet Route Table Association {1,2}
# - Private Subnet {1,2}
# - Private Route Table {1,2}
# - NAT Gateway Route {1,2}
# - Private Subnet Route Table Association {1,2}
snippet vpc_2azs
options head
	Vpc:
		Type: AWS::EC2::VPC
		Properties:
			CidrBlock: !Ref VpcCidr
			EnableDnsHostnames: true
			EnableDnsSupport: true
			InstanceTenancy: default
			Tags:
				- Key: Name
					Value: !Sub "${Prefix}-vpc"

	InternetGateway:
		Type: AWS::EC2::InternetGateway
		Properties:
			Tags:
				- Key: Name
					Value: !Sub "${Prefix}-internet-gateway"

	InternetGatewayAttachment:
		Type: AWS::EC2::VPCGatewayAttachment
		Properties:
			VpcId: !Ref Vpc
			InternetGatewayId: !Ref InternetGateway

	PublicSubnet1:
		Type: AWS::EC2::Subnet
		Properties:
			VpcId: !Ref Vpc
			CidrBlock: !Ref PublicSubnet1Cidr
			MapPublicIpOnLaunch: true
			AvailabilityZone: !Select
				- 0
				- Fn::GetAZs: !Ref "AWS::Region"
			Tags:
				- Key: Name
					Value: !Sub "${Prefix}-public-subnet-1"

	PublicSubnet2:
		Type: AWS::EC2::Subnet
		Properties:
			VpcId: !Ref Vpc
			CidrBlock: !Ref PublicSubnet2Cidr
			MapPublicIpOnLaunch: true
			AvailabilityZone: !Select
				- 1
				- Fn::GetAZs: !Ref "AWS::Region"
			Tags:
				- Key: Name
					Value: !Sub "${Prefix}-public-subnet-2"

	PrivateSubnet1:
		Type: AWS::EC2::Subnet
		Properties:
			VpcId: !Ref Vpc
			CidrBlock: !Ref PrivateSubnet1Cidr
			MapPublicIpOnLaunch: false
			AvailabilityZone: !Select
				- 0
				- Fn::GetAZs: !Ref "AWS::Region"
			Tags:
				- Key: Name
					Value: !Sub "${Prefix}-private-subnet-1"

	PrivateSubnet2:
		Type: AWS::EC2::Subnet
		Properties:
			VpcId: !Ref Vpc
			CidrBlock: !Ref PrivateSubnet2Cidr
			MapPublicIpOnLaunch: false
			AvailabilityZone: !Select
				- 1
				- Fn::GetAZs: !Ref "AWS::Region"
			Tags:
				- Key: Name
					Value: !Sub "${Prefix}-private-subnet-2"

	NatGateway1Eip:
		Type: AWS::EC2::EIP
		DependsOn: InternetGatewayAttachment
		Properties:
			Domain: vpc

	NatGateway2Eip:
		Type: AWS::EC2::EIP
		DependsOn: InternetGatewayAttachment
		Properties:
			Domain: vpc

	NatGateway1:
		Type: AWS::EC2::NatGateway
		Properties:
			AllocationId: !GetAtt NatGateway1Eip.AllocationId
			SubnetId: !Ref PublicSubnet1

	NatGateway2:
		Type: AWS::EC2::NatGateway
		Properties:
			AllocationId: !GetAtt NatGateway2Eip.AllocationId
			SubnetId: !Ref PublicSubnet2

	PublicRouteTable:
		Type: AWS::EC2::RouteTable
		Properties:
			VpcId: !Ref Vpc
			Tags:
				- Key: Name
					Value: !Sub "${Prefix}-public-route-table"

	InternetGatewayRoute:
		Type: AWS::EC2::Route
		Properties:
			RouteTableId: !Ref PublicRouteTable
			DestinationCidrBlock: "0.0.0.0/0"
			GatewayId: !Ref InternetGateway

	PublicSubnet1RouteTableAssociation:
		Type: AWS::EC2::SubnetRouteTableAssociation
		Properties:
			SubnetId: !Ref PublicSubnet1
			RouteTableId: !Ref PublicRouteTable

	PublicSubnet2RouteTableAssociation:
		Type: AWS::EC2::SubnetRouteTableAssociation
		Properties:
			SubnetId: !Ref PublicSubnet2
			RouteTableId: !Ref PublicRouteTable

	PrivateRouteTable1:
		Type: AWS::EC2::RouteTable
		Properties:
			VpcId: !Ref Vpc
			Tags:
				- Key: Name
					Value: !Sub "${Prefix}-private-route-table-1"

	PrivateRouteTable2:
		Type: AWS::EC2::RouteTable
		Properties:
			VpcId: !Ref Vpc
			Tags:
				- Key: Name
					Value: !Sub "${Prefix}-private-route-table-2"

	NatGateway1Route:
		Type: AWS::EC2::Route
		Properties:
			RouteTableId: !Ref PrivateRouteTable1
			DestinationCidrBlock: "0.0.0.0/0"
			NatGatewayId: !Ref NatGateway1

	NatGateway2Route:
		Type: AWS::EC2::Route
		Properties:
			RouteTableId: !Ref PrivateRouteTable2
			DestinationCidrBlock: "0.0.0.0/0"
			NatGatewayId: !Ref NatGateway2

	PrivateSubnet1RouteTableAssociation:
		Type: AWS::EC2::SubnetRouteTableAssociation
		Properties:
			SubnetId: !Ref PrivateSubnet1
			RouteTableId: !Ref PrivateRouteTable1

	PrivateSubnet2RouteTableAssociation:
		Type: AWS::EC2::SubnetRouteTableAssociation
		Properties:
			SubnetId: !Ref PrivateSubnet2
			RouteTableId: !Ref PrivateRouteTable2


# ==== VPC 3AZs ====
# - VPC
# - Internet Gateway
# - VPC Gateway Attachment
# - Public Subnet {1,2,3}
# - NAT Gateway {1,2,3}
# - Public Route Table
# - Internet Gateway Route
# - Public Subnet Route Table Association {1,2,3}
# - Private Subnet {1,2,3}
# - Private Route Table {1,2,3}
# - NAT Gateway Route {1,2,3}
# - Private Subnet Route Table Association {1,2,3}
snippet vpc_3azs
options head
	Vpc:
		Type: AWS::EC2::VPC
		Properties:
			CidrBlock: !Ref VpcCidr
			EnableDnsHostnames: true
			EnableDnsSupport: true
			InstanceTenancy: default
			Tags:
				- Key: Name
					Value: !Sub "${Prefix}-vpc"

	InternetGateway:
		Type: AWS::EC2::InternetGateway
		Properties:
			Tags:
				- Key: Name
					Value: !Sub "${Prefix}-internet-gateway"

	InternetGatewayAttachment:
		Type: AWS::EC2::VPCGatewayAttachment
		Properties:
			VpcId: !Ref Vpc
			InternetGatewayId: !Ref InternetGateway

	PublicSubnet1:
		Type: AWS::EC2::Subnet
		Properties:
			VpcId: !Ref Vpc
			CidrBlock: !Ref PublicSubnet1Cidr
			MapPublicIpOnLaunch: true
			AvailabilityZone: !Select
				- 0
				- Fn::GetAZs: !Ref "AWS::Region"
			Tags:
				- Key: Name
					Value: !Sub "${Prefix}-public-subnet-1"

	PublicSubnet2:
		Type: AWS::EC2::Subnet
		Properties:
			VpcId: !Ref Vpc
			CidrBlock: !Ref PublicSubnet2Cidr
			MapPublicIpOnLaunch: true
			AvailabilityZone: !Select
				- 1
				- Fn::GetAZs: !Ref "AWS::Region"
			Tags:
				- Key: Name
					Value: !Sub "${Prefix}-public-subnet-2"

	PublicSubnet3:
		Type: AWS::EC2::Subnet
		Properties:
			VpcId: !Ref Vpc
			CidrBlock: !Ref PublicSubnet3Cidr
			MapPublicIpOnLaunch: true
			AvailabilityZone: !Select
				- 2
				- Fn::GetAZs: !Ref "AWS::Region"
			Tags:
				- Key: Name
					Value: !Sub "${Prefix}-public-subnet-3"

	PrivateSubnet1:
		Type: AWS::EC2::Subnet
		Properties:
			VpcId: !Ref Vpc
			CidrBlock: !Ref PrivateSubnet1Cidr
			MapPublicIpOnLaunch: false
			AvailabilityZone: !Select
				- 0
				- Fn::GetAZs: !Ref "AWS::Region"
			Tags:
				- Key: Name
					Value: !Sub "${Prefix}-private-subnet-1"

	PrivateSubnet2:
		Type: AWS::EC2::Subnet
		Properties:
			VpcId: !Ref Vpc
			CidrBlock: !Ref PrivateSubnet2Cidr
			MapPublicIpOnLaunch: false
			AvailabilityZone: !Select
				- 1
				- Fn::GetAZs: !Ref "AWS::Region"
			Tags:
				- Key: Name
					Value: !Sub "${Prefix}-private-subnet-2"

	PrivateSubnet3:
		Type: AWS::EC2::Subnet
		Properties:
			VpcId: !Ref Vpc
			CidrBlock: !Ref PrivateSubnet3Cidr
			MapPublicIpOnLaunch: false
			AvailabilityZone: !Select
				- 2
				- Fn::GetAZs: !Ref "AWS::Region"
			Tags:
				- Key: Name
					Value: !Sub "${Prefix}-private-subnet-3"

	NatGateway1Eip:
		Type: AWS::EC2::EIP
		DependsOn: InternetGatewayAttachment
		Properties:
			Domain: vpc

	NatGateway2Eip:
		Type: AWS::EC2::EIP
		DependsOn: InternetGatewayAttachment
		Properties:
			Domain: vpc

	NatGateway3Eip:
		Type: AWS::EC2::EIP
		DependsOn: InternetGatewayAttachment
		Properties:
			Domain: vpc

	NatGateway1:
		Type: AWS::EC2::NatGateway
		Properties:
			AllocationId: !GetAtt NatGateway1Eip.AllocationId
			SubnetId: !Ref PublicSubnet1

	NatGateway2:
		Type: AWS::EC2::NatGateway
		Properties:
			AllocationId: !GetAtt NatGateway2Eip.AllocationId
			SubnetId: !Ref PublicSubnet2

	NatGateway3:
		Type: AWS::EC2::NatGateway
		Properties:
			AllocationId: !GetAtt NatGateway3Eip.AllocationId
			SubnetId: !Ref PublicSubnet3

	PublicRouteTable:
		Type: AWS::EC2::RouteTable
		Properties:
			VpcId: !Ref Vpc
			Tags:
				- Key: Name
					Value: !Sub "${Prefix}-public-route-table"

	InternetGatewayRoute:
		Type: AWS::EC2::Route
		Properties:
			RouteTableId: !Ref PublicRouteTable
			DestinationCidrBlock: "0.0.0.0/0"
			GatewayId: !Ref InternetGateway

	PublicSubnet1RouteTableAssociation:
		Type: AWS::EC2::SubnetRouteTableAssociation
		Properties:
			SubnetId: !Ref PublicSubnet1
			RouteTableId: !Ref PublicRouteTable

	PublicSubnet2RouteTableAssociation:
		Type: AWS::EC2::SubnetRouteTableAssociation
		Properties:
			SubnetId: !Ref PublicSubnet2
			RouteTableId: !Ref PublicRouteTable

	PublicSubnet3RouteTableAssociation:
		Type: AWS::EC2::SubnetRouteTableAssociation
		Properties:
			SubnetId: !Ref PublicSubnet3
			RouteTableId: !Ref PublicRouteTable

	PrivateRouteTable1:
		Type: AWS::EC2::RouteTable
		Properties:
			VpcId: !Ref Vpc
			Tags:
				- Key: Name
					Value: !Sub "${Prefix}-private-route-table-1"

	PrivateRouteTable2:
		Type: AWS::EC2::RouteTable
		Properties:
			VpcId: !Ref Vpc
			Tags:
				- Key: Name
					Value: !Sub "${Prefix}-private-route-table-2"

	PrivateRouteTable3:
		Type: AWS::EC2::RouteTable
		Properties:
			VpcId: !Ref Vpc
			Tags:
				- Key: Name
					Value: !Sub "${Prefix}-private-route-table-3"

	NatGateway1Route:
		Type: AWS::EC2::Route
		Properties:
			RouteTableId: !Ref PrivateRouteTable1
			DestinationCidrBlock: "0.0.0.0/0"
			NatGatewayId: !Ref NatGateway1

	NatGateway2Route:
		Type: AWS::EC2::Route
		Properties:
			RouteTableId: !Ref PrivateRouteTable2
			DestinationCidrBlock: "0.0.0.0/0"
			NatGatewayId: !Ref NatGateway2

	NatGateway3Route:
		Type: AWS::EC2::Route
		Properties:
			RouteTableId: !Ref PrivateRouteTable3
			DestinationCidrBlock: "0.0.0.0/0"
			NatGatewayId: !Ref NatGateway3

	PrivateSubnet1RouteTableAssociation:
		Type: AWS::EC2::SubnetRouteTableAssociation
		Properties:
			SubnetId: !Ref PrivateSubnet1
			RouteTableId: !Ref PrivateRouteTable1

	PrivateSubnet2RouteTableAssociation:
		Type: AWS::EC2::SubnetRouteTableAssociation
		Properties:
			SubnetId: !Ref PrivateSubnet2
			RouteTableId: !Ref PrivateRouteTable2

	PrivateSubnet3RouteTableAssociation:
		Type: AWS::EC2::SubnetRouteTableAssociation
		Properties:
			SubnetId: !Ref PrivateSubnet3
			RouteTableId: !Ref PrivateRouteTable3

# ==== Security Group ====
snippet sg
options head
	SecurityGroup:
		Type: AWS::EC2::SecurityGroup
		Properties:
			GroupDescription: !Sub "Security Group for ${Prefix}"
			GroupName: !Sub ${Prefix}-security-group
			VpcId: !Ref Vpc

snippet sg_ingress
options head
	SecurityGroupIngressAll:
		Type: AWS::EC2::SecurityGroupIngress
		Properties:
			GroupId: !GetAtt SecurityGroup.GroupId
			FromPort: -1
			ToPort: -1
			IpProtocol: "-1"
			SourceSecurityGroupId: !GetAtt SecurityGroup.GroupId

	SecurityGroupIngressSshPrefixListId:
		Type: AWS::EC2::SecurityGroupIngress
		Properties:
			GroupId: !GetAtt SecurityGroup.GroupId
			FromPort: 22
			ToPort: 22
			IpProtocol: tcp
			SourcePrefixListId: !FindInMap [ PrefixListIds, !Ref "AWS::Region", PrefixListId ]

	SecurityGroupIngressSshCidr:
		Type: AWS::EC2::SecurityGroupIngress
		Properties:
			GroupId: !GetAtt SecurityGroup.GroupId
			FromPort: 22
			ToPort: 22
			IpProtocol: tcp
			CidrIp: !Ref MyIpAddress

# ==== IAM Role ====
snippet iam_role
options head
	Role:
		Type: AWS::IAM::Role
		Properties:
			RoleName: !Sub "${Prefix}-${AWS::Region}-role"
			AssumeRolePolicyDocument:
				Version: "2012-10-17"
				Statement:
					- Effect: Allow
						Principal:
							Service: ec2.amazonaws.com
						Action: sts:AssumeRole
			ManagedPolicyArns:
				- arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

	RolePolicy:
		Type: AWS::IAM::Policy
		Properties:
			PolicyName: !Sub "${Prefix}-policy"
			Roles:
				- !Ref Role
			PolicyDocument:
				Version: "2012-10-17"
				Statement:
					- Effect: Allow
						Action:
							- iam:PassRole
						Resource: "*"

	InstanceProfile:
		Type: AWS::IAM::InstanceProfile
		Properties:
			InstanceProfileName: !Sub "${Prefix}-instance-profile"
			Roles:
				- !Ref Role


snippet iam_role_for_user
options head
	Role:
		Type: AWS::IAM::Role
		Properties:
			RoleName: !Sub "${Prefix}-${AWS::Region}-role"
			AssumeRolePolicyDocument:
				Version: "2012-10-17"
				Statement:
					- Effect: Allow
						Principal:
              AWS: !Ref AWS::AccountId
						Action: sts:AssumeRole

	RolePolicy:
		Type: AWS::IAM::Policy
		Properties:
			PolicyName: !Sub "${Prefix}-policy"
			Roles:
				- !Ref Role
			PolicyDocument:
				Version: "2012-10-17"
				Statement:
					- Effect: Allow
						Action:
							- iam:PassRole
						Resource: "*"

# ==== EC2 Instance ====
snippet ec2_instance
options head
	Instance:
		Type: AWS::EC2::Instance
		Properties:
			InstanceType: m5.xlarge
			ImageId: !Ref ImageId
			KeyName: !Sub "mykey-${AWS::Region}"
			SubnetId: !Ref PublicSubnet1
			IamInstanceProfile: !Ref InstanceProfile
			SecurityGroupIds:
				- !GetAtt SecurityGroup.GroupId
			Tags:
				- Key: Name
					Value: !Sub "${Prefix}-instance"
			BlockDeviceMappings:
					- DeviceName: /dev/xvda
						Ebs:
							DeleteOnTermination: true
							VolumeSize: 64
							VolumeType: gp2
					- DeviceName: /dev/sdf
						Ebs:
							DeleteOnTermination: true
							VolumeSize: 128
							VolumeType: gp2
			UserData:
					Fn::Base64: |
						#!/bin/bash
						set -ex
						lsblk
						mkfs -t ext4 /dev/sdf
						mkdir /mnt/data
						echo "/dev/sdf /mnt/data ext4 defaults,nofail 0 2" >> /etc/fstab

# ==== EC2 Launch Template ====
snippet ec2_launch_template
options head
	LaunchTemplate:
		Type: AWS::EC2::LaunchTemplate
		Properties:
			LaunchTemplateName: !Sub ${Prefix}-launch-template
			LaunchTemplateData:
				InstanceType: !Ref InstanceType
				ImageId: !Ref ImageId
				IamInstanceProfile:
					Arn: !GetAtt InstanceProfile.Arn
				SecurityGroupIds:
					- !GetAtt SecurityGroup.GroupId
        EbsOptimized: true
				BlockDeviceMappings:
					- DeviceName: /dev/xvda
						Ebs:
							DeleteOnTermination: true
							VolumeSize: 64
							VolumeType: gp2
				UserData:
					Fn::Base64: |
						#!/bin/bash
						amazon-linux-extras install nginx1
						systemctl start nginx

# ==== Lambda Function ====
snippet lambda_function
options head
	FunctionRole:
		Type: AWS::IAM::Role
		Properties:
			RoleName: !Sub "${Prefix}-${AWS::Region}-lambda-role"
			ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole  # for VPC Lambda
			AssumeRolePolicyDocument:
				Version: "2012-10-17"
				Statement:
					- Effect: Allow
						Principal:
							Service:
								- "lambda.amazonaws.com"
						Action:
							- "sts:AssumeRole"

	FunctionRolePolicy:
		Type: AWS::IAM::Policy
		Properties:
			PolicyName: !Sub ${Prefix}-${AWS::Region}-lambda-role-policy
			Roles:
				- !Ref FunctionRole
			PolicyDocument:
				# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-templates.html
				Version: "2012-10-17"
				Statement:
					- Effect: Allow
						Action:
							- es:ESHttpPost
							- es:ESHttpPut
						Resource:
							- !Sub "arn:${AWS::Partition}:es:${AWS::Region}:${AWS::AccountId}:domain/*"

	Function:
		Type: AWS::Lambda::Function
		Properties:
			Runtime: python3.8
			Code:
				S3Bucket: !Ref FunctionCodeS3Bucket
				S3Key: !Ref FunctionCodeS3Key
			Handler: main.handler
			Environment:
				Variables:
					CLOUDFORMATION_STACK_ID: !Ref "AWS::StackId"
					CLOUDFORMATION_STACK_NAME: !Ref "AWS::StackName"
			MemorySize: 128
			Timeout: 60
			Role: !GetAtt FunctionRole.Arn
			TracingConfig:
				Mode: Active


# ==== SAM Function ====
snippet lambda_function_sam
options head
	FunctionRole:
		Type: AWS::IAM::Role
		Properties:
			RoleName: !Sub ${Prefix}-${AWS::Region}-lambda-role
			ManagedPolicyArns:
				- arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
				- arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
				- arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole	# for VPC Lambda
			AssumeRolePolicyDocument:
				Version: "2012-10-17"
				Statement:
					- Effect: Allow
						Principal:
							Service:
								- "lambda.amazonaws.com"
						Action:
							- "sts:AssumeRole"

	FunctionRolePolicy:
		Type: AWS::IAM::Policy
		Properties:
			PolicyName: !Sub ${Prefix}-${AWS::Region}-lambda-role-policy
			Roles:
				- !Ref FunctionRole
			PolicyDocument:
				# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-templates.html
				Version: "2012-10-17"
				Statement:
					- Effect: Allow
						Action:
							- es:ESHttpPost
							- es:ESHttpPut
						Resource:
							- !Sub "arn:${AWS::Partition}:es:${AWS::Region}:${AWS::AccountId}:domain/*"

	Function:
		Type: AWS::Serverless::Function
		Properties:
			CodeUri: function/
			Handler: main.handler
			Runtime: python3.8
			Role: !GetAtt FunctionRole.Arn
