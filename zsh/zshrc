# ============ dotfiles HOME ============ 
DOTFILES_HOME="${HOME}/dotfiles"


# ============ External files ============
# Aliases file
ALIASES_FILE="${DOTFILES_HOME}/aliases"
# Dircolors file
DIRCOLORS_FILE="${DOTFILES_HOME}/downloads/dircolors.ansi-dark"
# Git prompt file
GITPROMPT_FILE="${DOTFILES_HOME}/downloads/git-prompt.sh"
# Git completion file
GITCOMPLETION_FILE="${DOTFILES_HOME}/downloads/git-completion.zsh"
# AWS Vault completion file
AWS_VAULT_COMPLETION_FILE="${DOTFILES_HOME}/downloads/aws-vault.zsh"

# Disable locking the terminal when inputing <Ctrl>+<s>.
stty stop undef


# ============ Set Envvars ============
export PATH="$PATH:$HOME/.local/bin"
export WORDCHARS='*?_-.[]~=&;!#$%^(){}<>'
if type nvim > /dev/null; then
  export EDITOR="nvim"
else
  export EDITOR="vim"
fi


# ============ Set directory colors ============
# Set directory colors.
# Need `gdircolors` in macOS, install it from Homebrew.
# Load dircolors
if [[ -e ${DIRCOLORS_FILE} ]]; then
  if [[ $(uname) = "Darwin" ]]; then
    if type gdircolors > /dev/null; then
      eval $(gdircolors ${DIRCOLORS_FILE})
    else
      echo "dotfiles: command not found: gdircolors"
      echo "Install \`coreutils' using Homebrew"
      echo ""
      echo "    $ brew install coreutils"
      echo ""
    fi
  elif [[ $(uname) = "Linux" ]]; then
    eval $(dircolors ${DIRCOLORS_FILE})
  fi
fi


# ============ Set Locale ============
if locale -a | grep en_US.UTF-8 > /dev/null; then
  export LC_ALL=en_US.UTF-8
  export LANG=en_US.UTF-8
fi


# ============ Set aliases ============
if [[ -e ${ALIASES_FILE} ]]; then
  source ${ALIASES_FILE}
fi


# ============ History file ============
export HISTSIZE=100000
export SAVEHIST=100000
export HISTCONTROL=ignoredups
export DIRSTACKSIZE=50


# ============ Shell Functions ============
# Set the `${FPATH}`s and `${fpath}`s which specifies the paths of "undefined" shell functions.
# usage: autoload [ {+|-}TUXkmtz ] [ -w ] [ name ... ]
# https://github.com/zsh-users/zsh/tree/master/Functions
autoload -Uz compinit && compinit
autoload -Uz add-zsh-hook


# ============ Set Options ============
# ==== Changing Directories ====
# Make cd push the old directory onto the directory stack.
setopt AUTO_PUSHD
# Donâ€™t push multiple copies of the same directory onto the directory stack.
setopt PUSHD_IGNORE_DUPS

# ==== Prompting ====
# The "parameter expansion", "command substitution" and 
# "arithmetic expansion" are performed in prompts. 
# This option is needed for `vcs_info`.
setopt PROMPT_SUBST
# Remove any right prompt from display when accepting a command line.
setopt TRANSIENT_RPROMPT

# ==== Expansion and Globbing ====
# If a pattern for filename generation has no matches, print an error, 
# instead of leaving it unchanged in the argument list (disabled with `no`).
setopt no_NOMATCH

# ==== History ====
# When searching for history entries in the line editor,
# do not display duplicates of a line previously found,
# even if the duplicates are not contiguous.
setopt HIST_FIND_NO_DUPS
# Do not enter command lines into the history list if they are duplicates of the previous event.
setopt HIST_SAVE_NO_DUPS


# ============ ZLE ============
bindkey -e


# ============ Completions ============
# ==== Completions in Homebrew ====
if [[ $(uname) = "Darwin" ]] && type brew > /dev/null; then
  fpath=($(brew --prefix)/share/zsh-completions ${fpath})
  fpath=($(brew --prefix)/share/zsh/site-functions ${fpath})
fi

# ==== Completions in cd ====
cdpath=()
zstyle ':completion:*:cd:*' ignore-parents parent pwd

# ==== Other Completions ====
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*' matcher-list 'm:{[:lower:]}={[:upper:]}'
zstyle ':completion:*:sh:*' file-patterns "*.sh"


# ============ Git ============
# ==== Completion ====
function _git_complete() {
  if [[ -e ${GITCOMPLETION_FILE} ]]; then
    zstyle ':completion:*:*:git:*' script ${GITCOMPLETION_FILE}
  fi
}
# ==== Prompt ====
# https://github.com/git/git/blob/master/contrib/completion/git-prompt.sh
if [[ -e ${GITPROMPT_FILE} ]]; then
  . ${GITPROMPT_FILE}
  export GIT_PS1_SHOWDIRTYSTATE=1
  export GTI_PS1_SHOWSTASHSTATE=1
  export GIT_PS1_SHOWUNTRACKEDFILES=1
  export GIT_PS1_SHOWUPSTREAM="auto"
  export GIT_PS1_SHOWCOLORHINTS=1
  export GIT_PS1_HIDE_IF_PWD_IGNORED=1
fi


# ============ Docker ============
# https://docs.docker.com/desktop/mac/#install-shell-completion
# https://docs.docker.com/compose/completion/
if [[ $(uname) = "Darwin" ]] && type brew > /dev/null; then
  if type docker > /dev/null; then
    if [[ ! -e $(brew --prefix)/share/zsh/site-functions/_docker ]]; then
      echo "dotfiles: symbolic link not found: _docker"
      echo "First install \`zsh-completions' using Homebrew"
      echo ""
      echo "    $ brew install zsh-completions"
      echo ""
      echo "Then, create symbolic links for docker and docker-compose"
      echo ""
      echo "    $ ln -s /Applications/Docker.app/Contents/Resources/etc/docker.zsh-completion \\"
      echo "        $(brew --prefix)/share/zsh/site-functions/_docker"
      echo ""
      echo "    $ ln -s /Applications/Docker.app/Contents/Resources/etc/docker-compose.zsh-completion \\"
      echo "        $(brew --prefix)/share/zsh/site-functions/_docker-compose"
      echo ""
    fi
    autoload -Uz compinit && compinit
    zstyle ':completion:*:*:docker:*' option-stacking yes
    zstyle ':completion:*:*:docker-*:*' option-stacking yes
  fi
fi


# ============ Go ============
export GOPATH="$HOME/go"
export PATH="$GOPATH/bin:$PATH"


# ============ pyenv ============
# Need `pyenv`, install it from Homebrew or github.
# Set `PYENV_ROOT` environment variable
export PYENV_ROOT="${PYENV_ROOT:-${HOME}/.pyenv}"
# Add pyenv binary path to `PATH`
export PATH="${PYENV_ROOT}/bin:${PATH}"
# Enable shims and autocompletion
if type pyenv > /dev/null; then
  eval "$(pyenv init --path)"
  eval "$(pyenv init -)"
fi


# ============ jenv ============
# Need `jenv`, install it from Homebrew or github.
# Set `JENV_HOME` environment variable
export JENV_ROOT="${JENV_ROOT:-${HOME}/.jenv}"
# Add jenv binary path to `PATH`
export PATH="${JENV_ROOT}/bin:${PATH}"
# Enable shims and autocompletion
if type jenv > /dev/null; then
  eval "$(jenv init -)"
fi


# ============ Bat ============
if type bat > /dev/null; then
  if [[ -n "${ITERM_PROFILE}" ]]; then
    if [[ ${ITERM_PROFILE} == "Solarized Dark" ]]; then
      export BAT_THEME="Solarized (dark)"
    elif [[ ${ITERM_PROFILE} == "Solarized Light" ]]; then
      export BAT_THEME="Solarized (light)"
    fi
  fi
fi


# ============ AWS CLI ============
autoload bashcompinit && bashcompinit;
if type aws_completer > /dev/null; then
  _FILENAME="$(which aws_completer)"
  complete -C "${_FILENAME}" aws
fi


# ============ Google Cloud SDK ============
if [[ -e $(brew --prefix)/share/google-cloud-sdk/path.zsh.inc ]]; then
  source "$(brew --prefix)/share/google-cloud-sdk/path.zsh.inc"
fi
if [[ -e $(brew --prefix)/share/google-cloud-sdk/completion.zsh.inc ]]; then
  source "$(brew --prefix)/share/google-cloud-sdk/completion.zsh.inc"
fi


# ============ Visula Studio Code ============
# https://code.visualstudio.com/docs/setup/mac
if [[ $(uname) = "Darwin" ]]; then
  export PATH="${PATH}:/Applications/Visual Studio Code.app/Contents/Resources/app/bin"
fi


# ============ IntelliJ IDEA ============
if [[ $(uname) = "Darwin" ]]; then
  export PATH="${PATH}:${HOME}/Library/Application Support/JetBrains/Toolbox/scripts"
fi

# ============ 1Password CLI ============
# https://developer.1password.com/docs/cli/get-started#shell-completion
if type op > /dev/null; then
  eval "$(op completion zsh)"; compdef _op op
fi


# ============ Prompt ============
export VIRTUAL_ENV_DISABLE_PROMPT=1
export PROMPT='[ %* | %n @ %M : %F{3}%~%f ]
$(__git_ps1 "(%s)")%# '


# ============ Zsh Completion ============
fpath=(~/.zfunc ${fpath})
autoload -Uz compinit && compinit


# ============ asdf ============
# https://asdf-vm.com/guide/getting-started.html
if type asdf > /dev/null; then
  . /opt/homebrew/opt/asdf/libexec/asdf.sh
fi


# ============ Kubernetes ============
# https://kubernetes.io/docs/reference/kubectl/quick-reference/
if type kubectl > /dev/null; then
  source <(kubectl completion zsh)
fi

# https://cloud.google.com/blog/products/containers-kubernetes/kubectl-auth-changes-in-gke
if type gke-gcloud-auth-plugin > /dev/null; then
  export USE_GKE_GCLOUD_AUTH_PLUGIN=True
fi


# ============ Rye ============
# https://rye-up.com/guide/installation/
if [[ -e ${HOME}/.rye/env ]]; then
  source "${HOME}/.rye/env"
fi
if type rye > /dev/null && [[ ! -f ${HOME}/.zfunc/_rye ]]; then
  mkdir -p ${HOME}/.zfunc
  rye self completion -s zsh > ${HOME}/.zfunc/_rye
fi



# ============ Rust ============
if type cargo > /dev/null; then
  . "$HOME/.cargo/env"
fi


# ============ AWS Vault ============
if type aws-vault > /dev/null; then
  eval "$(cat ${AWS_VAULT_COMPLETION_FILE})"
fi


# ============ fzf ============
if type fzf > /dev/null; then
  eval "$(fzf --zsh)"

  # Scheme name: Solarized Dark
  # Scheme system: base16
  # Scheme author: Ethan Schoonover (modified by aramisgithub)
  # Template author: Tinted Theming (https://github.com/tinted-theming)

  export FZF_DEFAULT_OPTS="$FZF_DEFAULT_OPTS --color=bg+:#073642,bg:#002b36,spinner:#2aa198,hl:#268bd2 --color=fg:#839496,header:#268bd2,info:#b58900,pointer:#2aa198 --color=marker:#2aa198,fg+:#eee8d5,prompt:#b58900,hl+:#268bd2"
  export FZF_TMUX_OPTS=''
fi


# ============ JWT ============
function decode-jwt() {
  if type jq > /dev/null; then
    jq -R 'split(".") | .[1] | @base64d | fromjson | .' <<< "$1"
  else
    echo "dotfiles: command not found: jq"
    echo "Install \`jq' using Homebrew"
  fi
}

# ============ direnv ============
if type direnv > /dev/null; then
  eval "$(direnv hook zsh)"
fi


# ============ zsh-syntax-highlighting ============
# https://github.com/zsh-users/zsh-syntax-highlighting
source $(brew --prefix)/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
ZSH_HIGHLIGHT_HIGHLIGHTERS+=(brackets)
